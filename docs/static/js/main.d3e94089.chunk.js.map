{"version":3,"sources":["serviceWorker.js","components/GifGridItem.jsx","helpers/GifHelper.js","components/GifGrid.jsx","hooks/useFetchGif.js","components/AddCategory.jsx","GifExpertApp.js","index.js"],"names":["Boolean","window","location","hostname","match","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","gif","images","downsized_medium","console","error","GifGrid","useState","loading","state","setState","useEffect","then","useFetchGif","role","key","AddCategory","setCategories","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCESC,EAjBK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC/B,OACE,yBAAKC,UAAU,4CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,EAAOE,UAAU,iBACrC,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcF,M,8BCRvBK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,sEAEbN,EAFa,iDAEmCK,EAFnC,+DAGAE,MAAMP,GAHN,cAGbQ,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YAAK,CAC5Bf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,QATjB,kBAYZW,GAZY,kCAenBK,QAAQC,MAAM,sBAAd,MAfmB,0DAAH,sDC8BLC,EAzBC,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFL,SAACA,GAAc,IAAD,EACbc,mBAAS,CACjCT,KAAM,GACNU,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAWvC,OALAC,qBAAU,WACRnB,EAAQC,GACLmB,MAAK,SAAAb,GAAI,OAAIW,EAAS,CAAEZ,KAAK,YAAKC,GAAOS,SAAS,SACpD,CAACf,IAEGgB,EDPsBI,CAAYpB,GAA7BM,EAFkB,EAEvBD,KAAWU,EAFY,EAEZA,QAGlB,OACE,yBAAKnB,UAAU,oBACb,wBAAIA,UAAU,yDAAyDI,GACrEe,GACA,yBAAKnB,UAAU,gCAAgCyB,KAAK,UAClD,0BAAMzB,UAAU,WAAhB,eAGJ,yBAAKA,UAAU,gBACXU,EAAKC,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAac,IAAKd,EAAIf,IAAQe,UEuBzCe,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHV,mBAAS,IAFN,mBAEhCW,EAFgC,KAEpBC,EAFoB,KAiBvC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BP,GAAe,SAACQ,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC/CN,EAAc,OAOd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAkBnBtC,UAAU,eACVyC,YAAY,4DCxBP,SAASC,EAAT,GAAsD,IAAD,IAA9BC,yBAA8B,MAAV,CAAC,OAAS,IAE5BzB,mBAASyB,GAFmB,mBAEzDP,EAFyD,KAE7CR,EAF6C,KAIhE,OACE,oCACE,yBAAK5B,UAAU,gDACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,YACA,uBAAGA,UAAU,QAAb,yBAGJ,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAa4B,cAAeA,IAC5B,6BACEQ,EAAWzB,KAAI,SAAAP,GAAQ,OAAI,kBAAC,EAAD,CAASsB,IAAKtB,EAAUA,SAAUA,S,MCZzEwC,IAASC,OACL,kBAACH,EAAD,MACAI,SAASC,eAAe,SP0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLD,QAAQC,MAAMA,EAAMsC,a","file":"static/js/main.d3e94089.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounceIn\">\r\n      <img src={url} alt={title} className=\"card-img-top\"/>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{title}</h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default GifGridItem","export const getGifs = async(category) => {\r\n  try {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=N7ddKAzEDMvEXuW5lNJ4dzMsBB4is18p`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(gif => ({\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images?.downsized_medium.url\r\n    }));\r\n    \r\n    return gifs;\r\n\r\n  } catch (error) {\r\n    console.error('OcurriÃ³ un error', error);\r\n  }\r\n} ","import React from 'react'\r\nimport GifGridItem  from './GifGridItem';\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGrid = ({category}) => {\r\n  \r\n  const {data:gifs, loading} = useFetchGif(category);\r\n\r\n\r\n  return (\r\n    <div className=\"row mx-3 mx-sm-0\">\r\n      <h3 className=\"title-section w-100 animate__animated animate__fadeIn\">{category}</h3>\r\n      { loading && \r\n        <div className=\"spinner-border text-info my-3\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      }\r\n      <div className=\"card-columns\">  \r\n        { gifs.map(gif => <GifGridItem key={gif.id} {...gif}></GifGridItem> )}\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default GifGrid\r\n\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/GifHelper\"\r\n\r\nexport const useFetchGif = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(gifs => setState({ data: [...gifs], loading: false}))\r\n  }, [category])\r\n\r\n  return state\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n  \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n      setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (inputValue.trim().length > 2) {\r\n        setCategories( (categories) => [inputValue, ...categories]);\r\n        setInputValue('');\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <input \r\n          type=\"text\" \r\n          value={inputValue} \r\n          onChange={handleInputChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Ingrese una palabra para buscar los gifs relacionados\"\r\n        ></input>\r\n      </form>\r\n    )\r\n  \r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n// AddCategory.defaultProps \r\n\r\nexport default AddCategory","import React, { useState } from 'react'\r\nimport GifGrid from './components/GifGrid.jsx';\r\nimport AddCategory from './components/AddCategory.jsx';\r\n\r\nexport default function GifExpertApp({defaultCategories = ['DBZ']}) {\r\n\r\n    const [categories, setCategories] = useState(defaultCategories);\r\n  \r\n    return (\r\n      <>\r\n        <div className=\"jumbotron jumbotron-fluid bg-color-jumbotron\">\r\n          <div className=\"container\">\r\n            <h1 className=\"display-4\">GiphyApp</h1>\r\n            <p className=\"lead\">This is a React app</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <AddCategory setCategories={setCategories}/>\r\n          <hr/>   \r\n          { categories.map(category => <GifGrid key={category} category={category}/>) }\r\n        </div> \r\n      </>\r\n    )\r\n  \r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport GifExpertApp from './GifExpertApp';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render( \n    <GifExpertApp /> ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}